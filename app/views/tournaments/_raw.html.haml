= stylesheet_link_tag "https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css"
= stylesheet_link_tag "https://cdn.rawgit.com/lafeber/world-flags-sprite/9a8b5ea6/stylesheets/flags16.css"

:css
  .hidden { visibility: hidden; }

  .bracket {
    font-family: 'Lucida Grande','Hiragino Kaku Gothic ProN', Meiryo, sans-serif;
    font-size: 14px;
    color: #333;
    display: flex;
    flex-wrap: nowrap;
    position: relative;
    overflow-x: scroll;
    /* overflow-y: hidden; */
    overflow-y: scroll;
    min-height: 220px;
  }
  .round {
    display: flex;
    flex-direction: column;
  }
  .match {
    position: relative;
    display: flex;
    flex-grow: 1;
    cursor: pointer;
    overflow: visible;
  }
  .teamContainer {
    margin: auto 0;
    padding: 7px 0;
  }
  .team {
    display: flex;
    align-items: center;
    background-color: #EEE;
    position: relative;
  }
  .team:first-child {
    margin-bottom: 1px;
  }
  .team:last-child {
    margin-top: 1px;
  }

  .name {
    width: 100px;
    padding-left: 5px;
    overflow: hidden;
  }
  .score {
    width: 40px;
    text-align: center;
    background-color: rgba(255,255,255,0.4);
  }
  .name, .score {
    height: 25px;
    line-height: 25px;
  }

  .lineContainer {
    display: flex;
    flex-direction: column;
  }
  .lineContainer > div {
    display: flex;
    flex-grow: 1;
  }
  .lineContainer > div > div {
    width: 20px;
  }

  /* 奇数試合 */
  .match:nth-child(odd) .lineContainer > div:last-child > div:first-child {
    border-top: 2px solid #999;
  }
  .match:nth-child(odd) .lineContainer > div:last-child > div:first-child {
    border-right: 2px solid #999;
  }
  .match:nth-child(odd) .lineContainer > div:last-child > div:last-child {
    border-bottom: 2px solid #999;
  }

  /* 偶数試合 */
  .match:nth-child(even) .lineContainer > div:first-child > div:first-child {
    border-bottom: 2px solid #999;
  }
  .match:nth-child(even) .lineContainer > div:first-child > div:first-child {
    border-right: 2px solid #999;
  }
  .match:nth-child(even) .lineContainer > div:first-child > div:last-child {
    border-top: 2px solid #999;
  }

  .match:nth-child(even) { margin-top: -2px; }
  .match.highlightSecond { z-index: 100; }
  .match.highlightFirst  { z-index: 101; }
  .match.highlight   { z-index: 102; }
  .match:hover { z-index: 103; }


  /* 勝敗のスコア表示 */
  .team.winner .score { color: #060; }
  .team.loser .score { color: #900; }
  /* .match:not(.final) .team.loser:not(.highlightSecond):not(.highlight) .name { opacity: 0.7; } */


  /* 優勝/準優勝 */
  .match.highlightFirst .team.winner, .final.round .final.match .team.winner { background-color: #DA0; }
  .match.highlightSecond .team.winner, .final.round .final.match .team.loser { background-color: #CCC; }
  .match:nth-child(n).highlightFirst .lineContainer > div > div:nth-child(n) { border-color: #DA0; }
  .match:nth-child(n).highlightSecond .lineContainer > div > div:nth-child(n) { border-color: #CCC; }

  .final.round { margin: auto 0; }
  .final.match { flex-grow: unset; }

  .bubble {
    height: 22px;
    line-height: 22px;
    width: 30px;
    right: -35px;
    position: absolute;
    text-align: center;
    font-size: 11px;
  }
  .bubble:after {
    content: '';
    position: absolute;
    top: 6px;
    left: -5px;
    width: 0;
    height: 0;
    border-top: 5px solid transparent;
    border-left: 0;
    border-right: 5px solid transparent;
    border-bottom: 5px solid transparent;
  }
  .final.match .winner .bubble {
    background-color: #DA0;
    color: #960;
  }
  .final.match .winner .bubble:after {
    border-right-color: #DA0;
  }
  .final.match .loser .bubble {
    background-color: #CCC;
    color: #333;
  }
  .final.match .loser .bubble:after {
    border-right-color: #CCC;
  }


  /* チームハイライト */
  .team.highlight { background-color: #3C0 !important; }
  .highlight .lineContainer > div > div { border-color: #3C0 !important; }


  /* ポップアップ表示 */
  .popupContainer {
    visibility: hidden;
    background-color: rgba(255,255,255,0.5);
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    cursor: auto;
  }

  .popupContent {
    visibility: hidden;
    position: absolute;
    background-color: rgba(0,0,0,0.9);
    width: 350px;
    padding: 25px 0;
    border-radius: 5px;
    color: #fff;
    cursor: auto;
  }
  .match.firstHalf .popupContent { top: 50%; }
  .match.latterHalf .popupContent { bottom: 50%; }
  .round.firstHalf .popupContent { left: calc(0% + 10px); }
  .round.latterHalf .popupContent { right: calc(0% + 10px); }

  .match.selected {
    z-index: 300;
  }
  .match.selected .popupContent, .match.selected .popupContainer {
    visibility: visible;
  }

  .popupContent h3 {
    font-size: 14px;
    font-weight: lighter;
    text-align: center;
    margin-top: 0;
  }
  .popupContent .popupTeamContainer {
    display: flex;
    justify-content: space-between;
    text-align: center;
    margin: 35px 5%;
  }
  .popupName, .popupScore {
    padding: 10px;
  }
  .popupName .profile {
    width: 100px;
    max-width: 90%;
    height: 100px;
    margin: auto;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    margin-bottom: 15px;
  }
  .popupTeamContainer .popupTeam {
    width: 45%;
    border: 1px solid #EFEFEF;
    padding: 20px 0;
    position: relative;
  }
  .popupTeam.winner {
    border: 2px solid #DA0;
    background-color: rgba(221,170,0,0.3);
  }
  .popupTeam.loser {
    border: 2px solid #CCC;
    background-color: rgba(204,204,204,0.3);
  }
  .popupComment {
    margin: 0 5%;
    word-break: break-all;
  }
  .popupSpacer {
    display: flex;
    align-items: center;
  }

  .popupBubble {
    position: absolute;
    top: -20px;
    width: 100%;
    text-align: center;
    font-weight: bold;
  }
  .winner .popupBubble { color: #DA0; }
  .winner .popupBubble:after { content: 'WIN'; }
  .loser .popupBubble { color: #AAA; }
  .loser .popupBubble:after { content: 'LOSE'; }


  /* ３位決定戦 */
  .skip.consolation { display: none; }

  .consolation.match {
    position: absolute;
    top: 50%;
    margin-top: 50px;
  }

  .consolation.match .winner .bubble {
    background-color: #963;
    color: #D95;
  }
  .consolation.match .winner .bubble:after {
    border-right-color: #963;
  }
  .consolation.match .loser .bubble {
    background-color: #678;
    color: #CCD;
  }
  .consolation.match .loser .bubble:after {
    border-right-color: #678;
  }


.bracket
  - tournament.results.each.with_index(1) do |round, round_num|
    - is_final_round = round_num == tournament.round_num
    - round_class = []
    - round_class << 'final' if is_final_round
    // 右半分、左半分にクラス付与してポップアップの位置調整
    - if round_num <= tournament.results.length / 2
      - round_class << 'firstHalf'
    - else
      - round_class << 'latterHalf'
    .round{class: round_class}
      - round.each.with_index(1) do |match, match_num|
        - match_class = []
        // 最終ラウンドは、決勝か３位決定戦のclass付与
        // それ以外は、優勝/準優勝チームのmatchをハイライト
        - if is_final_round
          - class_name = (match_num == 1) ? 'final' : 'consolation'
          - match_class << class_name
          // ３位決定戦スキップのときは非表示
          - if (match_num == 2) && !tournament.consolation_round
            - match_class << 'skip'
        - else
          - if match_num == tournament.highlight_match(round_num, 1)
            - match_class << 'highlightFirst'
          - elsif match_num == tournament.highlight_match(round_num, 2)
            - match_class << 'highlightSecond'
        // 上半分、下半分にクラス付与してポップアップの位置調整
        - if match_num <= round.length / 2
          - match_class << 'firstHalf'
        - else
          - match_class << 'latterHalf'
        .match{class: match_class}(onclick="this.classList.toggle('selected')")
          .teamContainer
            - for team_index in 0..1 do
              - if !match['winner'].nil?
                - team_class = (match['winner']==team_index) ? 'winner' : 'loser'
              - team = tournament.winner_team(round_num, match_num, team_index)
              .team{class: team_class, 'data-teamid': team['id']}
                .name
                  - if team['flag'].present?
                    %span.f16
                      %span.flag{class: team['flag']}
                  = team['name']
                .score= match['score'][team_index] || '--'

                - if is_final_round && match_num == 1
                  - if team_class == 'winner'
                    .bubble 1st
                  - elsif team_class == 'loser'
                    .bubble 2nd
                - elsif is_final_round && match_num == 2
                  - if team_class == 'winner'
                    .bubble 3rd
                  - elsif team_class == 'loser'
                    .bubble 4th

          - if !is_final_round
            .lineContainer
              %div
                %div
                %div
              %div
                %div
                %div

          .popupContainer
          .popupContent(onclick="event.stopPropagation();")
            %h3.popupTitle= tournament.match_name({round: round_num, game: match_num})
            .popupTeamContainer
              - for team_index in 0..1 do
                - if !match['winner'].nil?
                  - team_class = (match['winner']==team_index) ? 'winner' : 'loser'
                - team = tournament.winner_team(round_num, match_num, team_index)
                .popupTeam{class: team_class}
                  .popupBubble
                  .popupName
                    - if team['flag'].present?
                      %span.f16
                        %span.flag{class: team['flag']}
                    = team['name']
                  .popupScore
                    = match['score'][team_index] || '--'
                - if team_index == 0
                  .popupSpacer
                    \-
            .popupComment
              = tournament.text_url_to_link( simple_format(h(match['comment'])) ).html_safe


:javascript
  (function() {
    /* ハイライト */
    var teams = document.getElementsByClassName('team');
    for (var i = 0; i < teams.length; i++) {
      teams[i].addEventListener('mouseover', function(e){
        this.classList.add("highlight");  // idがないブロック(TBDなど)も一応ハイライトされるように

        var teamid = this.dataset.teamid;
        var selectedTeams = document.querySelectorAll('[data-teamid="'+ teamid +'"]');
        for (var j = 0; j < selectedTeams.length; j++) {
          selectedTeams[j].classList.add("highlight");

          // winnerの場合はmatchにもhighlightつけてlineContainerをハイライト
          if(selectedTeams[j].classList.contains('winner')) {
            var match = selectedTeams[j].parentNode.parentNode;
            match.classList.add("highlight");
          }
        }
      }, false);

      teams[i].addEventListener('mouseout', function(){
        for (var k = 0; k < teams.length; k++) {
          teams[k].classList.remove("highlight");

          var match = teams[k].parentNode.parentNode;
          match.classList.remove("highlight");
        }
      }, false);
    }
  })();
